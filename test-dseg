-- ───────────────────────────────────────────────────────────────
-- 1) If the table does not yet exist, create it with correct
--    partitioning & clustering.  Replace project / dataset names.
-- ───────────────────────────────────────────────────────────────
CREATE TABLE IF NOT EXISTS `my_project.my_ds.dseg_wide_h` (
  geohash STRING,
  dsegId  INT64,
  dateHour TIMESTAMP,                           -- truncated to hour
  sampleSize_15m   ARRAY<INT64>,                -- exactly 4 elems
  avgSpeed_15m     ARRAY<INT64>,
  harmSpeed_15m    ARRAY<INT64>,
  medianSpeed_15m  ARRAY<INT64>,
  stdSpeed_15m     ARRAY<INT64>,
  speedPercentiles_15m ARRAY<ARRAY<INT64>>,     -- nested
  total_sampleSize INT64
)
PARTITION BY DATE_TRUNC(dateHour, MONTH)
CLUSTER BY geohash, dsegId, dateHour
OPTIONS(
  description = 'Wide (hourly) view of TomTom DSEG with 4×15‑min bins'
);

-- ───────────────────────────────────────────────────────────────
-- 2) Transform and INSERT.  Uses safe array aggregation so every
--    hourly record has length‑4 arrays, with NULL padding.
-- ───────────────────────────────────────────────────────────────
INSERT INTO `my_project.my_ds.dseg_wide_h`
WITH base AS (
  SELECT
    geohash,
    dsegId,
    TIMESTAMP_TRUNC(dateHour , HOUR)       AS hour_ts,
    DIV(EXTRACT(MINUTE FROM dateHour), 15) AS bin_idx,   -- 0‑3
    sampleSize,
    averageSpeedMetersPerHour                 AS avg_spd,
    harmonicAverageSpeedMetersPerHour         AS harm_spd,
    medianSpeedMetersPerHour                  AS med_spd,
    standardDeviationSpeedMetersPerHour       AS std_spd,
    speedPercentiles
  FROM `my_project.my_ds.tt_bulk_test_geohash6`
),

-- Helper to map 0‑3 indices to four‑slot arrays
by_hour AS (
  SELECT
    geohash,
    dsegId,
    hour_ts AS dateHour,

    -- Build 4‑element arrays in positional order
    ARRAY(
      SELECT MAX(IF(bin_idx = i, sampleSize, NULL))
      FROM UNNEST(GENERATE_ARRAY(0,3)) AS i
    ) AS sampleSize_15m,

    ARRAY(
      SELECT MAX(IF(bin_idx = i, avg_spd, NULL))
      FROM UNNEST(GENERATE_ARRAY(0,3)) AS i
    ) AS avgSpeed_15m,

    ARRAY(
      SELECT MAX(IF(bin_idx = i, harm_spd, NULL))
      FROM UNNEST(GENERATE_ARRAY(0,3)) AS i
    ) AS harmSpeed_15m,

    ARRAY(
      SELECT MAX(IF(bin_idx = i, med_spd, NULL))
      FROM UNNEST(GENERATE_ARRAY(0,3)) AS i
    ) AS medianSpeed_15m,

    ARRAY(
      SELECT MAX(IF(bin_idx = i, std_spd, NULL))
      FROM UNNEST(GENERATE_ARRAY(0,3)) AS i
    ) AS stdSpeed_15m,

    ARRAY(                           -- nested array‑of‑arrays
      SELECT MAX(IF(bin_idx = i, speedPercentiles, NULL))
      FROM UNNEST(GENERATE_ARRAY(0,3)) AS i
    ) AS speedPercentiles_15m,

    SUM(sampleSize) AS total_sampleSize
  FROM base
  GROUP BY geohash, dsegId, dateHour
)

SELECT * FROM by_hour;




| ------------------------------------------------------------ ||
| **Row parity** – every original 15‑min record is represented | ``sql SELECT COUNT(*) FROM `…tt_bulk_test_geohash6`; -- A  SELECT SUM(ARRAY_LENGTH(sampleSize_15m)) FROM `…dseg_wide_h`; -- B  --  A should equal B ``                                                                                                                                                                                                                                                                                                                                                                                                                                                                              |
| **Total sample size integrity**                              | ``sql SELECT SAFE_DIVIDE(  (SELECT SUM(sampleSize) FROM `…tt_bulk_test_geohash6`),  (SELECT SUM(total_sampleSize) FROM `…dseg_wide_h`) ) AS ratio; -- expect = 1 ``                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| **Array length == 4**                                        | ``sql SELECT COUNTIF(ARRAY_LENGTH(sampleSize_15m) != 4) AS bad_rows FROM `…dseg_wide_h`; ``|
| **Null‑padding logic** – spot‑check hours with < 4 bins      | ``sql SELECT * FROM `…dseg_wide_h` WHERE ARRAY_LENGTH( (SELECT ARRAY(SELECT x FROM UNNEST(sampleSize_15m) x WHERE x IS NULL)) ) > 0 LIMIT 20; ``                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |
| **Speed analytics parity** (optional)                        | ``sql -- Avg speed at hour level should equal orig weighted mean  WITH src AS (SELECT geohash,dsegId, TIMESTAMP_TRUNC(dateHour,HOUR) h,  SUM(sampleSize*averageSpeedMetersPerHour) num, SUM(sampleSize) den FROM `…tt_bulk_test_geohash6` GROUP BY 1,2,3), tgt AS (SELECT geohash,dsegId,dateHour h,  ARRAY(SELECT AS STRUCT s, a FROM UNNEST(sampleSize_15m) s WITH OFFSET o JOIN UNNEST(avgSpeed_15m) a WITH OFFSET o2 USING(OFFSET)) arr, total_sampleSize den FROM `…dseg_wide_h`) SELECT * FROM src JOIN tgt USING(geohash,dsegId,h) WHERE ABS(src.num/src.den - ( SELECT SUM(a*s)/den FROM UNNEST(arr) )) > 0.01 LIMIT 10; `` |
