-- ───────────────────────────────────────────────────────────────
-- Hour-level aggregates sandbox – first N rows only
-- ───────────────────────────────────────────────────────────────
DECLARE row_limit INT64 DEFAULT 1000;   -- tweak as desired

WITH sample AS (
  SELECT *
  FROM   `stl-datascience.tomtom.tt_bulk_test_geohash6_wide_full`
  ORDER  BY dateHour, geohash         -- deterministic slice
  LIMIT  row_limit
)

SELECT
  w.geohash,
  w.dsegId,
  w.dateHour,

  -- ───── weighted means ─────
  SAFE_DIVIDE(
    (SELECT SUM(s.val * w.avgSpeed_15m[OFFSET(o)].val)
       FROM UNNEST(w.sampleSize_15m) s WITH OFFSET o
       WHERE s.val IS NOT NULL),
    (SELECT SUM(s.val)
       FROM UNNEST(w.sampleSize_15m) s
       WHERE s.val IS NOT NULL)
  ) AS avgSpeedMetersPerHour_hour,

  SAFE_DIVIDE(
    (SELECT SUM(s.val * w.harmSpeed_15m[OFFSET(o)].val)
       FROM UNNEST(w.sampleSize_15m) s WITH OFFSET o
       WHERE s.val IS NOT NULL),
    (SELECT SUM(s.val)
       FROM UNNEST(w.sampleSize_15m) s
       WHERE s.val IS NOT NULL)
  ) AS harmSpeedMetersPerHour_hour,

  SAFE_DIVIDE(
    (SELECT SUM(s.val * w.medianSpeed_15m[OFFSET(o)].val)
       FROM UNNEST(w.sampleSize_15m) s WITH OFFSET o
       WHERE s.val IS NOT NULL),
    (SELECT SUM(s.val)
       FROM UNNEST(w.sampleSize_15m) s
       WHERE s.val IS NOT NULL)
  ) AS medianSpeedMetersPerHour_hour,

  SAFE_DIVIDE(
    (SELECT SUM(s.val * w.stdSpeed_15m[OFFSET(o)].val)
       FROM UNNEST(w.sampleSize_15m) s WITH OFFSET o
       WHERE s.val IS NOT NULL),
    (SELECT SUM(s.val)
       FROM UNNEST(w.sampleSize_15m) s
       WHERE s.val IS NOT NULL)
  ) AS stdSpeedMetersPerHour_hour,

  -- ───── 19-percentile array via synthetic-sample TDigest ─────
  (
    SELECT APPROX_QUANTILES(val , wt , 19)
    FROM (
      SELECT
        w.speedPercentiles_15m[OFFSET(o)]
          .percentiles[OFFSET(idx)]               AS val,
        SAFE_CAST(ROUND(s.val / 19) AS INT64)     AS wt
      FROM UNNEST(w.sampleSize_15m) s WITH OFFSET o
      CROSS JOIN UNNEST(GENERATE_ARRAY(0,18)) idx
      WHERE s.val IS NOT NULL
        AND ARRAY_LENGTH(
              w.speedPercentiles_15m[OFFSET(o)].percentiles
            ) = 19
    )
  ) AS speedPercentiles_hour

FROM sample AS w
ORDER BY w.dateHour, w.geohash
LIMIT 50;            -- just show a few rows
