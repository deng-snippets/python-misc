-- ─────────────────────────────────────────────────────────────
-- Hour-level aggregation from 15-min table (geo6)
--  • TomTom histogram pipeline, NO APPROX_QUANTILES
--  • Units: metres/hour everywhere
--  • Keeps hour row even if all four slices lack percentiles
-- ─────────────────────────────────────────────────────────────
CREATE OR REPLACE TABLE
  `stl-datascience.tomtom.tt_bulk_test_geohash6_hourly`
PARTITION BY TIMESTAMP_TRUNC(dateHour, MONTH)
CLUSTER BY geohash, dsegId, dateHour AS

WITH slices AS (
  SELECT
    dsegId,
    geohash,
    TIMESTAMP_TRUNC(dateHour, HOUR)                         AS hour_ts,
    sampleSize                                              AS n,
    averageSpeedMetersPerHour                               AS v_arith,
    harmonicAverageSpeedMetersPerHour                       AS v_harm,
    tomtom.arrayMetersToMiles(speedPercentiles)             AS sp_mph
  FROM `stl-datascience.tomtom.tt_bulk_test_geohash6`
),

simulated AS (
  SELECT
    dsegId,
    geohash,
    hour_ts,
    n,
    v_arith,
    v_harm,
    IF(
      ARRAY_LENGTH(sp_mph) = 19,
      tomtom.resampleSpeedValues(
        tomtom.midpointMethodInt(
          sp_mph,
          CAST(GREATEST(
            0,
            sp_mph[OFFSET(0)] -
            1.2 * (sp_mph[OFFSET(1)] - sp_mph[OFFSET(0)])
          ) AS INT64),
          CAST(
            sp_mph[OFFSET(18)] +
            1.2 * (sp_mph[OFFSET(18)] - sp_mph[OFFSET(17)])
          AS INT64)
        ),
        GREATEST(CAST(ROUND(n) AS INT64), 1)
      ),
      []
    ) AS sims_mph
  FROM slices
),

agg AS (
  SELECT
    dsegId,
    geohash,
    hour_ts                                           AS dateHour,

    SUM(n)                                            AS total_sampleSize,
    SAFE_DIVIDE(SUM(n * v_arith), SUM(n))             AS avgSpeedMetersPerHour,
    SAFE_DIVIDE(SUM(n), SUM(n / NULLIF(v_harm,0)))    AS harmSpeedMetersPerHour,
    ARRAY_CONCAT_AGG(sims_mph)                        AS all_sims_mph
  FROM simulated
  GROUP BY dsegId, geohash, hour_ts
),

hist AS (
  SELECT
    *,
    tomtom.speedVals2Counts(all_sims_mph)             AS speed_hist_int  -- INT64
  FROM agg
)

SELECT
  dsegId,
  geohash,
  dateHour,
  total_sampleSize,
  avgSpeedMetersPerHour,
  harmSpeedMetersPerHour,

  /* ---- build 19-bin percentile array in metres/hour ---- */
  CASE
    WHEN ARRAY_LENGTH(speed_hist_int) = 0 THEN []   -- all four slices empty
    ELSE (
      -- 1️⃣ cast histogram INT64 → FLOAT64 for JS UDF
      WITH float_hist AS (
        SELECT ARRAY(
                 SELECT CAST(x AS FLOAT64)
                 FROM UNNEST(speed_hist_int) AS x
               ) AS fh
      )
      -- 2️⃣ histogram → 19 float percentiles (mph) → metres/hour ints
      SELECT ARRAY(
               SELECT CAST(ROUND(p * 1609.34) AS INT64)
               FROM UNNEST(
                 `stl-datascience.ma_tt.histToPercentiles_js`(
                   (SELECT fh FROM float_hist)
                 )
               ) AS p
             )
    )
  END AS speedPercentiles
FROM hist;
